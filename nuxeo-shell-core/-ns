{info:title=Namespce: *global*}Basic commands provided by the shell{info}
h1. Index
{toc:minLevel=2|maxLevel=2}

h2. commands
*NAME*
	commands -- Print a list of available commands

*SYNTAX*
	{code}commands{code}

*ALIASES*
	cmds

h2. exit
*NAME*
	exit -- Exit the interactive shell

*SYNTAX*
	{code}exit{code}

*ALIASES*
	quit

h2. help
*NAME*
	help -- The help command

*SYNTAX*
	{code}help [options] [command]{code}

*OPTIONS*
*	-export - If used export all the commands available in a wiki formatto the given file. If adirectory is given the export will be made in file help.wiki in that directory.
*	-ns - [optional] - to be used to filter commands by namespaces when generating the documentation. By default all namespaces are dumped.

*ARGUMENTS*
*	command - [optional] -the name of the command to get help for

h2. interactive
*NAME*
	interactive -- Interactive shell

*SYNTAX*
	{code}interactive{code}

h2. trace
*NAME*
	trace -- Print the last error stack trace if any

*SYNTAX*
	{code}trace{code}

h2. use
*NAME*
	use -- Switch the current command namespace. If no namespace is specified the current namepsace name is printed.

*SYNTAX*
	{code}use [name]{code}

*ARGUMENTS*
*	name - [optional] -The command namespace to use

h2. version
*NAME*
	version -- Print Nuxeo Shell Version

*SYNTAX*
	{code}version{code}


{info:title=Namespce: *local*}Commands available on the local file system{info}
h1. Index
{toc:minLevel=2|maxLevel=2}

h2. cat
*NAME*
	cat -- Print the content of a file

*SYNTAX*
	{code}cat [file]{code}

*ARGUMENTS*
*	file - [optional] -The file to print

h2. cd
*NAME*
	cd -- Change the local working directory

*SYNTAX*
	{code}cd file{code}

*ARGUMENTS*
*	file - [required] - A local directory to change to

h2. cp
*NAME*
	cp -- Copy a file or directory

*SYNTAX*
	{code}cp [options] source destination{code}

*OPTIONS*
*	-r - [flag] - Recursive copy directories

*ARGUMENTS*
*	source - [required] - The file to copy
*	destination - [required] - The target file

h2. ls
*NAME*
	ls -- List file names in a local directory

*SYNTAX*
	{code}ls [file]{code}

*ARGUMENTS*
*	file - [optional] -A local directory to list its content. Defaults to the working directory

h2. mkdir
*NAME*
	mkdir -- Create a directory in local file system

*SYNTAX*
	{code}mkdir file{code}

*ARGUMENTS*
*	file - [required] - The directory path to create

h2. mv
*NAME*
	mv -- Rename a file or directory

*SYNTAX*
	{code}mv source destination{code}

*ARGUMENTS*
*	source - [required] - The file to rename
*	destination - [required] - The target file

h2. popd
*NAME*
	popd -- Pop working directory

*SYNTAX*
	{code}popd{code}

h2. pushd
*NAME*
	pushd -- Push a new local working directory

*SYNTAX*
	{code}pushd file{code}

*ARGUMENTS*
*	file - [required] - A local directory to push

h2. pwd
*NAME*
	pwd -- Print the local working directory

*SYNTAX*
	{code}pwd [options]{code}

*OPTIONS*
*	-s - [flag] - Use this flag to show the working directory stack

h2. rm
*NAME*
	rm -- Remove a file or directory

*SYNTAX*
	{code}rm [options] file{code}

*OPTIONS*
*	-r - [flag] - Recursive remove dorectories

*ARGUMENTS*
*	file - [required] - The directory path to create

h2. touch
*NAME*
	touch -- Touch a file

*SYNTAX*
	{code}touch file{code}

*ARGUMENTS*
*	file - [required] - The file to touch


{info:title=Namespce: *remote*}High level commands exposed by a remote Nuxeo Server{info}
h1. Index
{toc:minLevel=2|maxLevel=2}

h2. connect
*NAME*
	connect -- Connect to a remote automation server

*SYNTAX*
	{code}connect [options] [url]{code}

*OPTIONS*
*	-p - The password
*	-u - The username

*ARGUMENTS*
*	url - [optional] -The url of the automation server


